[include]
	# For username / creds / etc
	path = ~/.gitconfig.local

[alias]
	up = pull
	p = push
	# Show git diff for whatever file (very useful for *wildcard filenames)
	df = diff --color --color-words --abbrev -- $1
	lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --
	lgs = log --stat
	# View abbreviated SHA, description, and history graph of the latest 20 commits
	l = log --pretty=oneline -n 20 --graph --abbrev-commit
	# View the current working tree status using the short format
	s = status -s
	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
	# Pull in remote changes for the current repository and all its submodules
	psub = !"git pull; git submodule foreach git pull origin master"
	# Clone a repository including all submodules
	c = clone --recursive
	# Commit all changes
	ca = !git add -A && git commit -av
	# Switch to a branch, creating it if necessary
	go = checkout -B
	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v
	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"
	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"
	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"
	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
	# Remove branches that have already been merged with master
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
[color]
	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git â‰¥ 1.8.4.)
	ui = auto
[core]
	excludesfile = /Users/adrian/.gitignore_global
	attributesfile = ~/.gitattributes
	autocrlf = input
	editor = code --wait
	ignorecase = false
[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green
[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold
[color "status"]
	added = yellow
	changed = green
	untracked = cyan
[merge]
	log = true
	tool = opendiff

[url "git@github.com:"]
	insteadOf = "gh:"
	insteadOf = "git://github.com"
	insteadOf = "https://github.com/"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"
	pushInsteadOf = "https://github.com/"
[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"
	pushInsteadOf = "https://gist.github.com/"

# Any GitHub repo with my username should be checked out r/w by default
# http://rentzsch.tumblr.com/post/564806957/public-but-hackable-git-submodules
[url "git@github.com:oprearocks/"]
	insteadOf = "git://github.com/oprearocks/"
[push]
	default = simple

[filter "media"]
	clean  = git-media-clean %f
	smudge = git-media-smudge %f

[difftool "diffconflicts"]
	cmd = diffconflicts mvim $BASE $LOCAL $REMOTE $MERGED

[mergetool "diffconflicts"]
	cmd           = diffconflicts mvim $BASE $LOCAL $REMOTE $MERGED
	trustExitCode = true
	keepBackup    = false

[mergetool]
	keepBackup    = false

[filter "lfs"]
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f
[user]
	email = adrian@oprea.rocks
	name = Adrian Oprea
	signingkey = BC532450041435FA
[credential]
	helper = osxkeychain
[gpg]
	program = /usr/local/bin/gpg
